!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COLUMN_EMAIL_SIZE	main.c	/^#define COLUMN_EMAIL_SIZE /;"	d	file:
COLUMN_USERNAME_SIZE	main.c	/^#define COLUMN_USERNAME_SIZE /;"	d	file:
EMAIL_OFFSET	main.c	/^const uint32_t EMAIL_OFFSET = USERNAME_OFFSET + USERNAME_SIZE;$/;"	v
EMAIL_SIZE	main.c	/^const uint32_t EMAIL_SIZE = size_of_attribute(Row, email);$/;"	v
EXECUTE_ERROR	main.c	/^    EXECUTE_ERROR$/;"	e	enum:__anon8	file:
EXECUTE_SUCCESS	main.c	/^    EXECUTE_SUCCESS,$/;"	e	enum:__anon8	file:
ExecuteResult	main.c	/^} ExecuteResult;$/;"	t	typeref:enum:__anon8	file:
ID_OFFSET	main.c	/^const uint32_t ID_OFFSET = 0;$/;"	v
ID_SIZE	main.c	/^const uint32_t ID_SIZE = size_of_attribute(Row, id);$/;"	v
InputBuffer	main.c	/^} InputBuffer;$/;"	t	typeref:struct:__anon2	file:
META_COMMAND_SUCCESS	main.c	/^    META_COMMAND_SUCCESS,$/;"	e	enum:__anon3	file:
META_COMMAND_UNRECOGNIZED_COMMAND	main.c	/^    META_COMMAND_UNRECOGNIZED_COMMAND$/;"	e	enum:__anon3	file:
MetaCommandResult	main.c	/^} MetaCommandResult;$/;"	t	typeref:enum:__anon3	file:
PAGE_SIZE	main.c	/^#define PAGE_SIZE /;"	d	file:
PREPARE_SUCCESS	main.c	/^    PREPARE_SUCCESS,$/;"	e	enum:__anon4	file:
PREPARE_SYNTAX_ERROR	main.c	/^    PREPARE_SYNTAX_ERROR$/;"	e	enum:__anon4	file:
PREPARE_UNRECOGNIZED_STATEMENT	main.c	/^    PREPARE_UNRECOGNIZED_STATEMENT,$/;"	e	enum:__anon4	file:
PrepareResult	main.c	/^} PrepareResult;$/;"	t	typeref:enum:__anon4	file:
ROWS_PER_PAGE	main.c	/^const uint32_t ROWS_PER_PAGE = PAGE_SIZE \/ ROW_SIZE;$/;"	v
ROW_SIZE	main.c	/^const uint32_t ROW_SIZE = ID_SIZE + USERNAME_SIZE + EMAIL_SIZE; $/;"	v
Row	main.c	/^} Row;$/;"	t	typeref:struct:__anon1	file:
STATEMENT_INSERT	main.c	/^    STATEMENT_INSERT,$/;"	e	enum:__anon5	file:
STATEMENT_SELECT	main.c	/^    STATEMENT_SELECT$/;"	e	enum:__anon5	file:
Statement	main.c	/^} Statement;$/;"	t	typeref:struct:__anon6	file:
StatementType	main.c	/^} StatementType;$/;"	t	typeref:enum:__anon5	file:
TABLE_MAX_PAGES	main.c	/^#define TABLE_MAX_PAGES /;"	d	file:
TABLE_MAX_ROWS	main.c	/^const uint32_t TABLE_MAX_ROWS = ROWS_PER_PAGE * TABLE_MAX_PAGES;$/;"	v
Table	main.c	/^} Table;$/;"	t	typeref:struct:__anon7	file:
USERNAME_OFFSET	main.c	/^const uint32_t USERNAME_OFFSET = ID_OFFSET + ID_SIZE;$/;"	v
USERNAME_SIZE	main.c	/^const uint32_t USERNAME_SIZE = size_of_attribute(Row, username);$/;"	v
buffer	main.c	/^    char* buffer;$/;"	m	struct:__anon2	file:
buffer_length	main.c	/^    size_t buffer_length;$/;"	m	struct:__anon2	file:
close_input_buffer	main.c	/^void close_input_buffer(InputBuffer* input_buffer) {$/;"	f
deserialize_row	main.c	/^void deserialize_row(void* source, Row* destination) {$/;"	f
do_meta_command	main.c	/^MetaCommandResult do_meta_command(InputBuffer *input_buffer) {$/;"	f
email	main.c	/^    char email[COLUMN_EMAIL_SIZE];$/;"	m	struct:__anon1	file:
execute_insert	main.c	/^ExecuteResult execute_insert(Statement* statement, Table* table) {$/;"	f
execute_select	main.c	/^ExecuteResult execute_select(Statement* statement, Table* table) {$/;"	f
execute_statement	main.c	/^void execute_statement(Statement* statement) {$/;"	f
free_table	main.c	/^void free_table(Table* table) {$/;"	f
id	main.c	/^    uint32_t id;$/;"	m	struct:__anon1	file:
input_length	main.c	/^    ssize_t input_length;$/;"	m	struct:__anon2	file:
main	main.c	/^int main(int argc, char* argv[]) {$/;"	f
new_input_buffer	main.c	/^InputBuffer* new_input_buffer() {$/;"	f
new_table	main.c	/^Table* new_table() {$/;"	f
num_rows	main.c	/^    uint32_t num_rows;$/;"	m	struct:__anon7	file:
pages	main.c	/^    void* pages[TABLE_MAX_PAGES];$/;"	m	struct:__anon7	file:
prepare_statement	main.c	/^PrepareResult prepare_statement(InputBuffer *input_buffer, Statement *statement) {$/;"	f
print_prompt	main.c	/^void print_prompt() {$/;"	f
print_row	main.c	/^void print_row(Row* row) {$/;"	f
read_input	main.c	/^void read_input(InputBuffer* input_buffer) {$/;"	f
row_slot	main.c	/^void* row_slot(Table* table, uint32_t row_num) {$/;"	f
row_to_insert	main.c	/^    Row row_to_insert;$/;"	m	struct:__anon6	file:
serialize_row	main.c	/^void serialize_row(Row* source, void* destination) {$/;"	f
size_of_attribute	main.c	/^#define size_of_attribute(/;"	d	file:
type	main.c	/^    StatementType type;$/;"	m	struct:__anon6	file:
username	main.c	/^    char username[COLUMN_USERNAME_SIZE];$/;"	m	struct:__anon1	file:
